openapi: 3.0.0
info:
  title: project1
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - auth
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    $ref: '#/components/schemas/Token'
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
      operationId: post-auth-register
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                  minLength: 6
                  maxLength: 128
                role:
                  type: string
                  enum:
                    - brand
                    - picker
                    - shopper
                name:
                  type: string
              required:
                - email
                - password
                - role
                - name
        description: ''
  /auth/login:
    post:
      summary: Get an accessToken
      operationId: post-auth-login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    $ref: '#/components/schemas/Token'
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - email
                - password
        description: ''
  /brands/profile:
    post:
      summary: Create profile
      tags: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      operationId: post-brands-profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
  /brands/product:
    post:
      summary: Add product
      tags: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      operationId: post-brands-product
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                price:
                  type: number
                  minimum: 0.01
                  exclusiveMinimum: false
                description:
                  type: string
                  maxLength: 200
              required:
                - name
                - price
                - description
    get:
      summary: Get products list
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  total:
                    type: integer
                    description: Total products count.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      operationId: get-brands-product
      parameters:
        - schema:
            type: number
            minimum: 1
          in: query
          name: page
        - schema:
            type: number
            minimum: 1
            maximum: 100
          in: query
          name: perPage
      description: ''
    patch:
      summary: Edit product stock
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      operationId: patch-brands-product
      parameters:
        - schema:
            type: string
          in: query
          name: id
          description: Product Id
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum:
                    - clothes
                    - shoes
                    - jewelry
                sizes:
                  type: string
                outOfStock:
                  type: boolean
          application/xml:
            schema:
              type: object
              properties: {}
    parameters: []
  '/brands/product/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get product
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                example:
                  value:
                    message: Product does not exist
      operationId: get-brand-product-id
      description: ''
  /auth/confirm:
    post:
      summary: Confirm email
      tags:
        - auth
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
      operationId: post-auth-confirm
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                token:
                  type: string
              required:
                - email
  /pickers/campaign:
    post:
      summary: Create campaign.
      tags:
        - pickers
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  campaign:
                    $ref: '#/components/schemas/Campaign'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      operationId: post-pickers-campaign
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                products:
                  type: array
                  description: List of products IDs.
                  items:
                    type: string
                brandId:
                  type: string
              required:
                - products
                - brandId
  /pickers/brands:
    get:
      summary: Get brands list.
      tags:
        - pickers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  brands:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        email:
                          type: string
                          format: email
                        role:
                          type: string
                        createdAt:
                          type: string
                          format: date
                  total:
                    type: integer
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      operationId: get-pickers-brands
      parameters:
        - schema:
            type: number
            minimum: 1
            maximum: 100
            default: 30
          in: query
          name: limit
        - schema:
            type: number
            minimum: 1
            default: 1
          in: query
          name: page
components:
  schemas:
    Token:
      title: Token
      type: object
      properties:
        tokenType:
          type: string
          default: Bearer
        accessToken:
          type: string
        refreshToken:
          type: string
        expiresIn:
          type: string
          format: date-time
    User:
      title: User
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum:
            - brand
            - picker
            - shopper
            - admin
      x-examples: {}
    Profile:
      title: Profile
      type: object
      properties:
        name:
          type: string
        country:
          type: string
        website:
          type: string
          format: uri
        instagram:
          type: string
          format: uri
        code:
          type: number
        phone:
          type: string
      required:
        - name
        - country
        - website
        - instagram
        - code
        - phone
    Product:
      title: Product
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        price:
          type: number
        description:
          type: string
        outOfStock:
          type: boolean
        type:
          type: string
          enum:
            - clothes
            - shoes
            - jewelry
        sizes:
          type: string
      required:
        - id
        - name
        - price
        - description
    Campaign:
      title: Campaign
      type: object
      properties:
        id:
          type: string
        ownerId:
          $ref: '#/components/schemas/User'
        brandId:
          $ref: '#/components/schemas/User'
        products:
          type: array
          items:
            type: string
        expires:
          type: string
          format: date
      required:
        - id
        - ownerId
        - brandId
        - products
        - expires
